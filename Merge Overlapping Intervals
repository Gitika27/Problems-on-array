package com.practice.examples.dsa;

import java.util.*;

public class MergeIntervals {
	
	public static int[][] toArray(ArrayList<int[]> a){
		int[][] res = new int[a.size()][2];
		
		
		for(int i = 0; i < res.length; i++) {
			
			int[] temp = a.get(i);
			
			res[i] = temp;
		}
		
		return res;
	}
	
	public static int[][] mergeIntervals(int[][] intervals){
		
		PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> Integer.compare(a[0], b[0]));
		ArrayList<int[]> a = new ArrayList<>();
		int[][] res = null;
		
		for(int[] i : intervals) {
			pq.add(i);
		}
		

		
		int[] current = pq.poll();
		
		while(!pq.isEmpty()) {
			
			 int[] next = pq.poll();
	            
	            if (current[1] >= next[0]) {
	                // There is an overlap, so merge intervals
	                current[1] = Math.max(current[1], next[1]);
	            } else {
	                // No overlap, add the current interval to merged list
	                a.add(current);
	                // Move to the next interval
	                current = next;
	            }
			
		}
		
		a.add(current);
		
		for(int[] i : a) {
			System.out.println(Arrays.toString(i));
		}
		
		res = toArray(a);
		

		return res;
	}

	public static void main(String[] args) {
		
		int[][] intervals = {{1,3},{2,6},{8,10},{15,18}};
		int[][] res = mergeIntervals(intervals);
		
		for(int i = 0; i < res.length; i++) {
			
			//System.out.println(Arrays.toString(res[i]));
		}


	}

}

Output: 
[1, 6]
[8, 10]
[15, 18]
