You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.



Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

class Solution {
    public boolean canJump(int[] nums) {
        
        int n = nums.length;
        int farthest = 0;
        for(int i = 0; i < n; i++){
            if (i > farthest) return false;
            farthest = Math.max(farthest, i + nums[i]);
            if(farthest >= n-1) return true;
        }
        return true;
    }
}

farthest keeps track of the farthest index you can reach from the starting position (index 0) using the jumps available so far.

As you iterate through the array, you update farthest to be the maximum of its current value and i + nums[i] (the farthest you can jump from the current position i).

Why Check if (i > farthest)?
The condition if (i > farthest) checks whether the current index i is beyond the farthest index you can reach. If this happens, it means:

You cannot reach the current index i from any of the previous positions.

Since you can't even reach index i, you definitely cannot reach the end of the array (which is even farther).

In other words, if i > farthest, it implies that there is a "gap" in the array that you cannot jump over, making it impossible to reach the end.
