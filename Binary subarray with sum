package com.practice.examples.dsa;

import java.util.HashMap;

public class BinarySubarrayWithSum {
	
	
	public static int bruteForce(int[] nums, int goal) {
		int ans = 0;
		int n = nums.length;
		
		for(int i = 0; i < n; i++) {
			int sum = 0;
			for(int j = i; j < n; j++) {
				sum += nums[j];
				if(sum > goal) {
					break;
				}
				if(sum == goal) {
					ans++;
				}
			}
		}
		
		
		
		return ans;
	}
	
	public static int optimalSolution(int[] nums, int goal) {
		int ans = 0;
		int n = nums.length;
		int sum = 0;
		HashMap<Integer,Integer> d = new HashMap<>();
		d.put(0, 1);
		
		for(int i = 0; i < n; i++) {
			sum += nums[i];
			int diff = sum - goal;
			
			if(d.containsKey(diff)) {
				ans += d.get(diff);
			}
			
			d.put(sum, d.getOrDefault(sum, 0)+1);
		}
		
		
		return ans;
	}

	public static void main(String[] args) {
		int[] nums = {0,0,0,0,0};
		int goal = 0;
		System.out.println("brute force: "+bruteForce(nums,goal));
		System.out.println("optimalSolution force: "+optimalSolution(nums,goal));

	}

}

Output: 
brute force: 15
optimalSolution force: 15
