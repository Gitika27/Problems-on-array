package com.practiceProblems.java;

import java.util.HashMap;
import java.util.Scanner;

public class LongestConsecutiveSubsequence_1 {
	
	public static int calculateCount(int num, HashMap<Integer,Integer> d) {
		int count = 1;

		while( true) {
			
			if(d.containsKey(num+1)) {
				count++;
				d.put(num+1, 1);
				num = num + 1;
				
			}
			else {
				break;
			}


		}
		
		
		return count;
	}

	public static void main(String[] args) {
		
//		Scanner sc = new Scanner(System.in);
		
		int[] nums = {100,4,200,1,3,2};
		int n = nums.length;
		int ans = 0;
		HashMap<Integer,Integer> d = new HashMap<>();
		
		for(int i = 0; i < n; i++) {
			
			d.put(nums[i], 0);
		}
			
		for(int i = 0; i < n; i++) {
			
			// only check the subsequence if nums[i] is the starting number in the subsequence and if its not visited yet
			if(d.get(nums[i]) == 0 && !d.containsKey(nums[i]-1)) {
				ans = Math.max(ans, calculateCount(nums[i],d));

			}

		}
		
		System.out.println("Ans is "+ans);

	}

}
